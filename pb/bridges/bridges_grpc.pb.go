// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bridges.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrigageService_SetKeys_FullMethodName    = "/Bridges.BrigageService/SetKeys"
	BrigageService_SendByKeys_FullMethodName = "/Bridges.BrigageService/SendByKeys"
	BrigageService_SendAll_FullMethodName    = "/Bridges.BrigageService/SendAll"
)

// BrigageServiceClient is the client API for BrigageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrigageServiceClient interface {
	SetKeys(ctx context.Context, in *SetKeysRequest, opts ...grpc.CallOption) (*SetKeysReply, error)
	SendByKeys(ctx context.Context, in *SendByKeysRequest, opts ...grpc.CallOption) (*SendReply, error)
	SendAll(ctx context.Context, in *SendAllRequest, opts ...grpc.CallOption) (*SendReply, error)
}

type brigageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrigageServiceClient(cc grpc.ClientConnInterface) BrigageServiceClient {
	return &brigageServiceClient{cc}
}

func (c *brigageServiceClient) SetKeys(ctx context.Context, in *SetKeysRequest, opts ...grpc.CallOption) (*SetKeysReply, error) {
	out := new(SetKeysReply)
	err := c.cc.Invoke(ctx, BrigageService_SetKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brigageServiceClient) SendByKeys(ctx context.Context, in *SendByKeysRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, BrigageService_SendByKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brigageServiceClient) SendAll(ctx context.Context, in *SendAllRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, BrigageService_SendAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrigageServiceServer is the server API for BrigageService service.
// All implementations must embed UnimplementedBrigageServiceServer
// for forward compatibility
type BrigageServiceServer interface {
	SetKeys(context.Context, *SetKeysRequest) (*SetKeysReply, error)
	SendByKeys(context.Context, *SendByKeysRequest) (*SendReply, error)
	SendAll(context.Context, *SendAllRequest) (*SendReply, error)
	mustEmbedUnimplementedBrigageServiceServer()
}

// UnimplementedBrigageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrigageServiceServer struct {
}

func (UnimplementedBrigageServiceServer) SetKeys(context.Context, *SetKeysRequest) (*SetKeysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeys not implemented")
}
func (UnimplementedBrigageServiceServer) SendByKeys(context.Context, *SendByKeysRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendByKeys not implemented")
}
func (UnimplementedBrigageServiceServer) SendAll(context.Context, *SendAllRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (UnimplementedBrigageServiceServer) mustEmbedUnimplementedBrigageServiceServer() {}

// UnsafeBrigageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrigageServiceServer will
// result in compilation errors.
type UnsafeBrigageServiceServer interface {
	mustEmbedUnimplementedBrigageServiceServer()
}

func RegisterBrigageServiceServer(s grpc.ServiceRegistrar, srv BrigageServiceServer) {
	s.RegisterService(&BrigageService_ServiceDesc, srv)
}

func _BrigageService_SetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrigageServiceServer).SetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrigageService_SetKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrigageServiceServer).SetKeys(ctx, req.(*SetKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrigageService_SendByKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendByKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrigageServiceServer).SendByKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrigageService_SendByKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrigageServiceServer).SendByKeys(ctx, req.(*SendByKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrigageService_SendAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrigageServiceServer).SendAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrigageService_SendAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrigageServiceServer).SendAll(ctx, req.(*SendAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrigageService_ServiceDesc is the grpc.ServiceDesc for BrigageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrigageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bridges.BrigageService",
	HandlerType: (*BrigageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetKeys",
			Handler:    _BrigageService_SetKeys_Handler,
		},
		{
			MethodName: "SendByKeys",
			Handler:    _BrigageService_SendByKeys_Handler,
		},
		{
			MethodName: "SendAll",
			Handler:    _BrigageService_SendAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridges.proto",
}
